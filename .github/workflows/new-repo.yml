name: New repo creator

on:
  issue_comment:
    types: [created]

jobs:
  preview:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'new repo')
      && github.event.comment.author_association == 'OWNER'
      && github.event.comment.body == '.preview'
    steps:
      - name: Comment on the issue with preview information for new repo
        env:
          github_token: ${{secrets.GITHUB_TOKEN}}
          issue_title: ${{github.event.issue.title}}
          issue_body: ${{github.event.issue.body}}
          comments_url: ${{github.event.issue.comments_url}}
        run: |
          $description = $env:issue_title -replace "^New Repo: "
          $name = $description.ToLowerInvariant() -replace "[^a-z0-9]+", '-'
          $body_first_line = $env:issue_body -split "`n" | ? {$_} | select -first 1
          $name_match = "^(name)|(tag)|(url):\s"
          if ($body_first_line -match $name_match) {
            $name = $body_first_line -replace $name_match
          }
          Write-Output "name: $name"
          Write-Output "description: $description"
          $restParams = @{
            Method = 'Post'
            Uri = $env:comments_url
            Headers = @{
              Authentication = "token $env:github_token"
            }
            ContentType = 'application/json'
            Body = @{
              'body' = "**Repository name:** ``$name``","**Repository description:** ``$description``" -join "`n"
            } | ConvertTo-Json
          }
          Invoke-RestMethod @restParams
        shell: pwsh
      
  create:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'new repo')
      && github.event.comment.author_association == 'OWNER'
      && github.event.comment.body == '.approve'
    
    steps:
    - uses: actions/checkout@v1
    - name: Run the repository creation script
      run: echo "creating repository placeholder"
